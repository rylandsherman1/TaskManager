{"ast":null,"code":"var _jsxFileName = \"/home/rsherman/Development/code/phase-4/TaskManager/client/src/components/Home.js\",\n  _s = $RefreshSig$();\n// components/Home.js\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  useEffect(() => {\n    // Fetch tasks when the component is mounted\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/tasks\"); // Make sure the port is 5000\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setTasks(data);\n      } catch (error) {\n        console.error(\"Failed to fetch tasks:\", error);\n      }\n    };\n    fetchTasks();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to On My Plate!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"task-box\",\n        style: {\n          margin: \"10px\",\n          padding: \"10px\",\n          border: \"1px solid #ccc\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: task.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Complete: \", task.complete ? \"Yes\" : \"No\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this)]\n      }, task.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"bBd6yqkqV9dlkj9ENgRyXKaiXpk=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Home","_s","tasks","setTasks","fetchTasks","response","fetch","ok","Error","status","data","json","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","map","task","className","style","margin","padding","border","title","complete","id","_c","$RefreshReg$"],"sources":["/home/rsherman/Development/code/phase-4/TaskManager/client/src/components/Home.js"],"sourcesContent":["// components/Home.js\nimport React, { useState, useEffect } from \"react\";\n\nconst Home = () => {\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    // Fetch tasks when the component is mounted\n    const fetchTasks = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/tasks\"); // Make sure the port is 5000\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        setTasks(data);\n      } catch (error) {\n        console.error(\"Failed to fetch tasks:\", error);\n      }\n    };\n\n    fetchTasks();\n  }, []);\n\n  return (\n    <div>\n      <h1>Welcome to On My Plate!</h1>\n      <div>\n        {tasks.map((task) => (\n          <div\n            key={task.id}\n            className=\"task-box\"\n            style={{\n              margin: \"10px\",\n              padding: \"10px\",\n              border: \"1px solid #ccc\",\n            }}\n          >\n            <h3>{task.title}</h3>\n            <p>Complete: {task.complete ? \"Yes\" : \"No\"}</p>\n            {/* Display other task details */}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,UAAU,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,CAAC,CAAC,CAAC;QAC7D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBH,QAAQ,CAACI,MAAO,EAAC,CAAC;QAC3D;QACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QAClCR,QAAQ,CAACO,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAChD;IACF,CAAC;IAEDR,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAuB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChCnB,OAAA;MAAAe,QAAA,EACGZ,KAAK,CAACiB,GAAG,CAAEC,IAAI,iBACdrB,OAAA;QAEEsB,SAAS,EAAC,UAAU;QACpBC,KAAK,EAAE;UACLC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE,MAAM;UACfC,MAAM,EAAE;QACV,CAAE;QAAAX,QAAA,gBAEFf,OAAA;UAAAe,QAAA,EAAKM,IAAI,CAACM;QAAK;UAAAX,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACrBnB,OAAA;UAAAe,QAAA,GAAG,YAAU,EAACM,IAAI,CAACO,QAAQ,GAAG,KAAK,GAAG,IAAI;QAAA;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAT1CE,IAAI,CAACQ,EAAE;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAWT,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACjB,EAAA,CA3CID,IAAI;AAAA6B,EAAA,GAAJ7B,IAAI;AA6CV,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}